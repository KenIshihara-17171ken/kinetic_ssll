
import numpy as np
import random

def get_THETA_function(T,R,N):
    """
    This funciton computes spikes data and THETA for generating spike data.

    :param int R:
        The number of total trial.
    :param int T:
        The length of the observation time.
    :param int nnum:
        The number of neurons.
    :param int f:
        Frequency of the sine curve for THETA generation.

    returns numpy.ndarray spikes:
        Numpy array (time+1,nnum) of spike data.

    returns numpy.ndarray THETA:
        Numpy array (time,nnum,nnum+1) of THETA.

    @author: Ken Ishihara
    """

    # Initialization of the parameters
    THETA = np.zeros((T,N,N+1))
    
   

    # random.seed(1)
    np.random.seed(1) 
    f = np.random.uniform(1,5,(N,N+1))
    # random.seed(1)
    # np.random.seed(1) 
    phi = np.random.uniform(0,6,(N,N+1))

    pi = np.pi
    dt = 1/T

    # Generate theata
    # Caution！:The time to generate THETA is time+1 steps from 0 to "time".
    for i in range(N):
        for n in range(N+1):

            for t in range(T):
                if n == 0:
                    THETA[t,i,n] = -1+2*np.sin(2*pi*f[i,n]*dt*t + phi[i,n])
                else:
                    THETA[t,i,n] = 2*np.sin(2*pi*f[i,n]*dt*t + phi[i,n])
#                     THETA[t,i,n]=0


    return THETA

def get_THETA_gaussian_process(T, N, sigma = 8):
    THETA = np.zeros((T,N,N+1))
    Theta = np.zeros((T,N,N+1))
    for i in range(N):
        THETA[:,i,:] = generate_thetas(T, D = N+1, sigma=sigma)
    return THETA

def generate_thetas(T, D , mu= 1 , sigma=0.5, alpha=0.5):
    """ Generates dynamic thetas by a Gaussian Process.

    :param int T:
        Number of time bins.
    :param numpy.float mu1:
        Mean of first order parameters for the Gaussian process (Default=-2).
    :param float sigma1:
        Determines how strong first order parameters change over time (Default=50).
    :param float alpha:
        Scalar that determines the correlations over time of the Gaussian
        process is (Default=12).

    :return:
        Matrix with dimensions (t, d) with theta parameters generated by GP.
         'd' is the dimensionality of the model.
    """
    MU = np.tile(mu, (T, D))
    # print('',MU)
    # Create covariance matrix
    X = np.tile(np.arange(T),(T,1))
    # print('X',X)
    K = 1./alpha*np.exp(-(X - X.transpose()) ** 2 / (2. * sigma ** 2))
    # print(' K', K)
    # Generate Gaussian processes
    L = np.linalg.cholesky(K + 1e-13 * np.eye(T))
    
    THETA = np.empty([T, D])
    THETA = mu + np.dot(L, np.random.randn(T, D))

    # print('THETA',THETA)

    return THETA



def get_S_function(T,R,N,THETA):
    """
    This funciton computes spikes data and THETA for generating spike data.

    :param int R:
        The number of total trial.
    :param int T:
        The length of the observation time.
    :param int nnum:
        The number of neurons.
    :param int f:
        Frequency of the sine curve for THETA generation.

    returns numpy.ndarray spikes:
        Numpy array (time+1,nnum) of spike data.

    returns numpy.ndarray THETA:
        Numpy array (time,nnum,nnum+1) of THETA.

    @author: Ken Ishihara
    """

    # Generate spikes data
    # Caution！:The time to generate spikes data is time+1 steps from 0 to "time".
    psi = np.zeros((T+1,R,N))
    spikes = np.zeros((T+1,R,N))

    rand_numbers = np.random.rand(T+1,R,N)
    for l in range(R):
        # Initial time(t=0) spike data has a 0.5 probability of generating  1 or 0.
        for i in range(N):
            spikes[0, l, i] = int(np.greater_equal(0.5, rand_numbers[0,l, i]))

        # Generate spike data after T>0
        for t in range(1,T+1):
            for i in range(N):
                F_psi=np.append(1, spikes[t-1,l,])
                psi[t, l, i] = np.log(1+np.exp(np.dot(THETA[t-1, i],F_psi)))
                p1 = np.exp(np.dot(THETA[t-1, i],F_psi) - psi[t, l, i])

                spikes[t, l, i] = int(np.greater_equal(p1, rand_numbers[t, l, i]))

    return spikes



# def get_FSUM(spikes,T,R,N):
#     """
#     This funciton computes

#     :param numpy.ndarray spikes:
#         Numpy array (time+1,nnum) of spike data.
#     :param int R:
#         The number of total trial.
#     :param int T:
#         The length of the observation time.
#     :param int N:
#         The number of neurons.
#     returns numpy.ndarray FSUM:
#         Numpy array (T,N) of FSUM.

#     @author: Ken Ishihara
#     """
#     FSUM = np.zeros((T, N, N+1))
#     for l in range(R):
#         for t in range(1, T+1):
#             for n in range(N):
#                 FSUM[t-1, n] += np.append(spikes[t, l, n], spikes[t, l, n]*spikes[t-1,l])

#     return FSUM
